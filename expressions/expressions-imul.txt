
a.out:     file format elf64-x86-64


Disassembly of section .interp:

0000000000000318 <.interp>:
 318:	(bad)  
 319:	ins    BYTE PTR es:[rdi],dx
 31a:	imul   esp,DWORD PTR [rdx+0x36],0x646c2f34
 321:	sub    eax,0x756e696c
 326:	js     355 <__abi_tag-0x3>
 328:	js     362 <__abi_tag+0xa>
 32a:	ss sub eax,0x732e3436
 330:	outs   dx,DWORD PTR ds:[rsi]
 331:	cs xor al,BYTE PTR [rax]

Disassembly of section .note.gnu.property:

0000000000000338 <.note.gnu.property>:
 338:	add    al,0x0
 33a:	add    BYTE PTR [rax],al
 33c:	adc    BYTE PTR [rax],al
 33e:	add    BYTE PTR [rax],al
 340:	add    eax,0x47000000
 345:	rex.WRX push rbp
 347:	add    BYTE PTR [rdx],al
 349:	add    BYTE PTR [rax],0xc0
 34c:	add    al,0x0
 34e:	add    BYTE PTR [rax],al
 350:	add    DWORD PTR [rax],eax
 352:	add    BYTE PTR [rax],al
 354:	add    BYTE PTR [rax],al
	...

Disassembly of section .note.ABI-tag:

0000000000000358 <__abi_tag>:
 358:	add    al,0x0
 35a:	add    BYTE PTR [rax],al
 35c:	adc    BYTE PTR [rax],al
 35e:	add    BYTE PTR [rax],al
 360:	add    DWORD PTR [rax],eax
 362:	add    BYTE PTR [rax],al
 364:	rex.RXB
 365:	rex.WRX push rbp
 367:	add    BYTE PTR [rax],al
 369:	add    BYTE PTR [rax],al
 36b:	add    BYTE PTR [rbx],al
 36d:	add    BYTE PTR [rax],al
 36f:	add    BYTE PTR [rdx],al
 371:	add    BYTE PTR [rax],al
 373:	add    BYTE PTR [rax],al
 375:	add    BYTE PTR [rax],al
	...

Disassembly of section .gnu.hash:

0000000000000378 <.gnu.hash>:
 378:	add    al,BYTE PTR [rax]
 37a:	add    BYTE PTR [rax],al
 37c:	add    eax,0x1000000
 381:	add    BYTE PTR [rax],al
 383:	add    BYTE PTR [rsi],al
 385:	add    BYTE PTR [rax],al
 387:	add    BYTE PTR [rax],al
 389:	add    BYTE PTR [rcx+0x0],al
 38f:	add    BYTE PTR [rip+0x0],al        # 395 <__abi_tag+0x3d>
 395:	add    BYTE PTR [rax],al
 397:	add    cl,dl
 399:	gs (bad) 
 39b:	ins    DWORD PTR es:[rdi],dx

Disassembly of section .dynsym:

00000000000003a0 <.dynsym>:
	...
 3b8:	adc    BYTE PTR [rax],al
 3ba:	add    BYTE PTR [rax],al
 3bc:	adc    al,BYTE PTR [rax]
	...
 3ce:	add    BYTE PTR [rax],al
 3d0:	rex.XB add BYTE PTR [r8],al
 3d3:	add    BYTE PTR [rax],ah
	...
 3e5:	add    BYTE PTR [rax],al
 3e7:	add    BYTE PTR [rdi+0x0],bl
 3ea:	add    BYTE PTR [rax],al
 3ec:	and    BYTE PTR [rax],al
	...
 3fe:	add    BYTE PTR [rax],al
 400:	outs   dx,BYTE PTR ds:[rsi]
 401:	add    BYTE PTR [rax],al
 403:	add    BYTE PTR [rax],ah
	...
 415:	add    BYTE PTR [rax],al
 417:	add    BYTE PTR [rcx],al
 419:	add    BYTE PTR [rax],al
 41b:	add    BYTE PTR [rdx],ah
	...

Disassembly of section .dynstr:

0000000000000430 <.dynstr>:
 430:	add    BYTE PTR [rdi+0x5f],bl
 433:	movsxd edi,DWORD PTR [rax+0x61]
 436:	pop    rdi
 437:	imul   bp,WORD PTR [rsi+0x61],0x696c
 43d:	jp     4a4 <__abi_tag+0x14c>
 43f:	add    BYTE PTR [rdi+0x5f],bl
 442:	ins    BYTE PTR es:[rdi],dx
 443:	imul   esp,DWORD PTR [rdx+0x63],0x6174735f
 44a:	jb     4c0 <__abi_tag+0x168>
 44c:	pop    rdi
 44d:	ins    DWORD PTR es:[rdi],dx
 44e:	(bad)  
 44f:	imul   ebp,DWORD PTR [rsi+0x0],0x6362696c
 456:	cs jae 4c8 <__abi_tag+0x170>
 459:	cs ss add BYTE PTR [rdi+0x4c],al
 45e:	rex.WB
 45f:	rex.X
 460:	rex.XB pop r15
 462:	xor    ch,BYTE PTR [rsi]
 464:	xor    ch,BYTE PTR [rsi]
 466:	xor    eax,0x494c4700
 46b:	rex.X
 46c:	rex.XB pop r15
 46e:	xor    ch,BYTE PTR [rsi]
 470:	xor    esi,DWORD PTR [rax+rax*1]
 473:	pop    rdi
 474:	rex.WB push r12
 476:	rex.WRB pop r15
 478:	fs gs jb 4e1 <__abi_tag+0x189>
 47c:	imul   esi,DWORD PTR [ebx+0x74],0x4d547265
 484:	rex.XB ins BYTE PTR es:[rdi],dx
 486:	outs   dx,DWORD PTR ds:[rsi]
 487:	outs   dx,BYTE PTR ds:[rsi]
 488:	gs push rsp
 48a:	(bad)  
 48b:	(bad)  
 48c:	ins    BYTE PTR es:[rdi],dx
 48d:	add    BYTE PTR gs:[rdi+0x5f],bl
 491:	ins    DWORD PTR es:[edi],dx
 493:	outs   dx,DWORD PTR ds:[rsi]
 494:	outs   dx,BYTE PTR ds:[rsi]
 495:	pop    rdi
 496:	jae    50c <__abi_tag+0x1b4>
 498:	(bad)  
 499:	jb     50f <__abi_tag+0x1b7>
 49b:	pop    rdi
 49c:	pop    rdi
 49d:	add    BYTE PTR [rdi+0x49],bl
 4a0:	push   rsp
 4a1:	rex.WRB pop r15
 4a3:	jb     50a <__abi_tag+0x1b2>
 4a5:	imul   esi,DWORD PTR [ebx+0x74],0x4d547265
 4ad:	rex.XB ins BYTE PTR es:[rdi],dx
 4af:	outs   dx,DWORD PTR ds:[rsi]
 4b0:	outs   dx,BYTE PTR ds:[rsi]
 4b1:	gs push rsp
 4b3:	(bad)  
 4b4:	.byte 0x62
 4b5:	ins    BYTE PTR es:[rdi],dx
 4b6:	gs
	...

Disassembly of section .gnu.version:

00000000000004b8 <.gnu.version>:
 4b8:	add    BYTE PTR [rax],al
 4ba:	add    al,BYTE PTR [rax]
 4bc:	add    DWORD PTR [rax],eax
 4be:	add    DWORD PTR [rax],eax
 4c0:	add    DWORD PTR [rax],eax
 4c2:	add    eax,DWORD PTR [rax]

Disassembly of section .gnu.version_r:

00000000000004c8 <.gnu.version_r>:
 4c8:	add    DWORD PTR [rax],eax
 4ca:	add    al,BYTE PTR [rax]
 4cc:	and    al,BYTE PTR [rax]
 4ce:	add    BYTE PTR [rax],al
 4d0:	adc    BYTE PTR [rax],al
 4d2:	add    BYTE PTR [rax],al
 4d4:	add    BYTE PTR [rax],al
 4d6:	add    BYTE PTR [rax],al
 4d8:	jne    4f4 <__abi_tag+0x19c>
 4da:	imul   ecx,DWORD PTR [rcx],0x30000
 4e0:	sub    al,0x0
 4e2:	add    BYTE PTR [rax],al
 4e4:	adc    BYTE PTR [rax],al
 4e6:	add    BYTE PTR [rax],al
 4e8:	mov    ah,0x91
 4ea:	xchg   esi,eax
 4eb:	(bad)  
 4ec:	add    BYTE PTR [rax],al
 4ee:	add    al,BYTE PTR [rax]
 4f0:	cmp    BYTE PTR [rax],al
 4f2:	add    BYTE PTR [rax],al
 4f4:	add    BYTE PTR [rax],al
	...

Disassembly of section .rela.dyn:

00000000000004f8 <.rela.dyn>:
 4f8:	sbb    BYTE PTR [rsi],bh
 4fa:	add    BYTE PTR [rax],al
 4fc:	add    BYTE PTR [rax],al
 4fe:	add    BYTE PTR [rax],al
 500:	or     BYTE PTR [rax],al
 502:	add    BYTE PTR [rax],al
 504:	add    BYTE PTR [rax],al
 506:	add    BYTE PTR [rax],al
 508:	and    BYTE PTR [rcx],dl
 50a:	add    BYTE PTR [rax],al
 50c:	add    BYTE PTR [rax],al
 50e:	add    BYTE PTR [rax],al
 510:	and    BYTE PTR [rsi],bh
 512:	add    BYTE PTR [rax],al
 514:	add    BYTE PTR [rax],al
 516:	add    BYTE PTR [rax],al
 518:	or     BYTE PTR [rax],al
 51a:	add    BYTE PTR [rax],al
 51c:	add    BYTE PTR [rax],al
 51e:	add    BYTE PTR [rax],al
 520:	loopne 532 <__abi_tag+0x1da>
 522:	add    BYTE PTR [rax],al
 524:	add    BYTE PTR [rax],al
 526:	add    BYTE PTR [rax],al
 528:	and    BYTE PTR [rax+0x0],al
 52b:	add    BYTE PTR [rax],al
 52d:	add    BYTE PTR [rax],al
 52f:	add    BYTE PTR [rax],cl
 531:	add    BYTE PTR [rax],al
 533:	add    BYTE PTR [rax],al
 535:	add    BYTE PTR [rax],al
 537:	add    BYTE PTR [rax],ah
 539:	rex add BYTE PTR [rax],al
 53c:	add    BYTE PTR [rax],al
 53e:	add    BYTE PTR [rax],al
 540:	fdivr  DWORD PTR [rdi]
 542:	add    BYTE PTR [rax],al
 544:	add    BYTE PTR [rax],al
 546:	add    BYTE PTR [rax],al
 548:	(bad)  
 549:	add    BYTE PTR [rax],al
 54b:	add    BYTE PTR [rcx],al
	...
 555:	add    BYTE PTR [rax],al
 557:	add    al,ah
 559:	(bad)  
 55a:	add    BYTE PTR [rax],al
 55c:	add    BYTE PTR [rax],al
 55e:	add    BYTE PTR [rax],al
 560:	(bad)  
 561:	add    BYTE PTR [rax],al
 563:	add    BYTE PTR [rdx],al
	...
 56d:	add    BYTE PTR [rax],al
 56f:	add    al,ch
 571:	(bad)  
 572:	add    BYTE PTR [rax],al
 574:	add    BYTE PTR [rax],al
 576:	add    BYTE PTR [rax],al
 578:	(bad)  
 579:	add    BYTE PTR [rax],al
 57b:	add    BYTE PTR [rbx],al
	...
 585:	add    BYTE PTR [rax],al
 587:	add    al,dh
 589:	(bad)  
 58a:	add    BYTE PTR [rax],al
 58c:	add    BYTE PTR [rax],al
 58e:	add    BYTE PTR [rax],al
 590:	(bad)  
 591:	add    BYTE PTR [rax],al
 593:	add    BYTE PTR [rax+rax*1],al
	...
 59e:	add    BYTE PTR [rax],al
 5a0:	clc    
 5a1:	(bad)  
 5a2:	add    BYTE PTR [rax],al
 5a4:	add    BYTE PTR [rax],al
 5a6:	add    BYTE PTR [rax],al
 5a8:	(bad)  
 5a9:	add    BYTE PTR [rax],al
 5ab:	add    BYTE PTR [rip+0x0],al        # 5b1 <__abi_tag+0x259>
 5b1:	add    BYTE PTR [rax],al
 5b3:	add    BYTE PTR [rax],al
 5b5:	add    BYTE PTR [rax],al
	...

Disassembly of section .init:

0000000000001000 <_init>:
    1000:	endbr64 
    1004:	sub    rsp,0x8
    1008:	mov    rax,QWORD PTR [rip+0x2fd9]        # 3fe8 <__gmon_start__@Base>
    100f:	test   rax,rax
    1012:	je     1016 <_init+0x16>
    1014:	call   rax
    1016:	add    rsp,0x8
    101a:	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	push   QWORD PTR [rip+0x2fe2]        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	jmp    QWORD PTR [rip+0x2fe4]        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	nop    DWORD PTR [rax+0x0]

Disassembly of section .plt.got:

0000000000001030 <__cxa_finalize@plt>:
    1030:	jmp    QWORD PTR [rip+0x2fc2]        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1036:	xchg   ax,ax

Disassembly of section .text:

0000000000001040 <_start>:
    1040:	endbr64 
    1044:	xor    ebp,ebp
    1046:	mov    r9,rdx
    1049:	pop    rsi
    104a:	mov    rdx,rsp
    104d:	and    rsp,0xfffffffffffffff0
    1051:	push   rax
    1052:	push   rsp
    1053:	xor    r8d,r8d
    1056:	xor    ecx,ecx
    1058:	lea    rdi,[rip+0xf1]        # 1150 <main>
    105f:	call   QWORD PTR [rip+0x2f73]        # 3fd8 <__libc_start_main@GLIBC_2.34>
    1065:	hlt    
    1066:	cs nop WORD PTR [rax+rax*1+0x0]

0000000000001070 <deregister_tm_clones>:
    1070:	lea    rdi,[rip+0x2fb1]        # 4028 <__TMC_END__>
    1077:	lea    rax,[rip+0x2faa]        # 4028 <__TMC_END__>
    107e:	cmp    rax,rdi
    1081:	je     1098 <deregister_tm_clones+0x28>
    1083:	mov    rax,QWORD PTR [rip+0x2f56]        # 3fe0 <_ITM_deregisterTMCloneTable@Base>
    108a:	test   rax,rax
    108d:	je     1098 <deregister_tm_clones+0x28>
    108f:	jmp    rax
    1091:	nop    DWORD PTR [rax+0x0]
    1098:	ret    
    1099:	nop    DWORD PTR [rax+0x0]

00000000000010a0 <register_tm_clones>:
    10a0:	lea    rdi,[rip+0x2f81]        # 4028 <__TMC_END__>
    10a7:	lea    rsi,[rip+0x2f7a]        # 4028 <__TMC_END__>
    10ae:	sub    rsi,rdi
    10b1:	mov    rax,rsi
    10b4:	shr    rsi,0x3f
    10b8:	sar    rax,0x3
    10bc:	add    rsi,rax
    10bf:	sar    rsi,1
    10c2:	je     10d8 <register_tm_clones+0x38>
    10c4:	mov    rax,QWORD PTR [rip+0x2f25]        # 3ff0 <_ITM_registerTMCloneTable@Base>
    10cb:	test   rax,rax
    10ce:	je     10d8 <register_tm_clones+0x38>
    10d0:	jmp    rax
    10d2:	nop    WORD PTR [rax+rax*1+0x0]
    10d8:	ret    
    10d9:	nop    DWORD PTR [rax+0x0]

00000000000010e0 <__do_global_dtors_aux>:
    10e0:	endbr64 
    10e4:	cmp    BYTE PTR [rip+0x2f3d],0x0        # 4028 <__TMC_END__>
    10eb:	jne    1118 <__do_global_dtors_aux+0x38>
    10ed:	push   rbp
    10ee:	cmp    QWORD PTR [rip+0x2f02],0x0        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    10f6:	mov    rbp,rsp
    10f9:	je     1107 <__do_global_dtors_aux+0x27>
    10fb:	mov    rdi,QWORD PTR [rip+0x2f1e]        # 4020 <__dso_handle>
    1102:	call   1030 <__cxa_finalize@plt>
    1107:	call   1070 <deregister_tm_clones>
    110c:	mov    BYTE PTR [rip+0x2f15],0x1        # 4028 <__TMC_END__>
    1113:	pop    rbp
    1114:	ret    
    1115:	nop    DWORD PTR [rax]
    1118:	ret    
    1119:	nop    DWORD PTR [rax+0x0]

0000000000001120 <frame_dummy>:
    1120:	endbr64 
    1124:	jmp    10a0 <register_tm_clones>
    1129:	nop    DWORD PTR [rax+0x0]

0000000000001130 <expr>:
    1130:	push   rbp
    1131:	mov    rbp,rsp
    1134:	mov    DWORD PTR [rbp-0x4],edi
    1137:	mov    DWORD PTR [rbp-0x8],esi
    113a:	mov    eax,DWORD PTR [rbp-0x4]
    113d:	imul   eax,DWORD PTR [rbp-0x8]
    1141:	mov    DWORD PTR [rbp-0xc],eax
    1144:	xor    eax,eax
    1146:	pop    rbp
    1147:	ret    
    1148:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001150 <main>:
    1150:	push   rbp
    1151:	mov    rbp,rsp
    1154:	sub    rsp,0x10
    1158:	mov    DWORD PTR [rbp-0x4],0x0
    115f:	mov    DWORD PTR [rbp-0x8],edi
    1162:	mov    QWORD PTR [rbp-0x10],rsi
    1166:	mov    edi,0x1
    116b:	mov    esi,0x2
    1170:	call   1130 <expr>
    1175:	xor    eax,eax
    1177:	add    rsp,0x10
    117b:	pop    rbp
    117c:	ret    

Disassembly of section .fini:

0000000000001180 <_fini>:
    1180:	endbr64 
    1184:	sub    rsp,0x8
    1188:	add    rsp,0x8
    118c:	ret    

Disassembly of section .rodata:

0000000000002000 <_IO_stdin_used>:
    2000:	add    DWORD PTR [rax],eax
    2002:	add    al,BYTE PTR [rax]

Disassembly of section .eh_frame_hdr:

0000000000002004 <__GNU_EH_FRAME_HDR>:
    2004:	add    DWORD PTR [rbx],ebx
    2006:	add    edi,DWORD PTR [rbx]
    2008:	xor    BYTE PTR [rax],al
    200a:	add    BYTE PTR [rax],al
    200c:	add    eax,0x1c000000
    2011:	lock (bad) 
    2013:	jmp    QWORD PTR [rax+rax*1+0x0]
    2017:	add    BYTE PTR [rax+rsi*8],ch
    201a:	(bad)  
    201b:	dec    DWORD PTR [rax+rax*1-0xfc40000]
    2022:	(bad)  
    2023:	dec    DWORD PTR [rax+rax*1+0x0]
    2027:	add    BYTE PTR [rcx+rsi*8],ch
    202a:	(bad)  
    202b:	jmp    QWORD PTR [rax+rax*1-0xeb40000]
    2032:	(bad)  
    2033:	inc    esp
    2035:	add    BYTE PTR [rax],al
	...

Disassembly of section .eh_frame:

0000000000002038 <__FRAME_END__-0xb0>:
    2038:	adc    al,0x0
    203a:	add    BYTE PTR [rax],al
    203c:	add    BYTE PTR [rax],al
    203e:	add    BYTE PTR [rax],al
    2040:	add    DWORD PTR [rdx+0x52],edi
    2043:	add    BYTE PTR [rcx],al
    2045:	js     2057 <__GNU_EH_FRAME_HDR+0x53>
    2047:	add    DWORD PTR [rbx],ebx
    2049:	or     al,0x7
    204b:	or     BYTE PTR [rax+0x14000001],dl
    2051:	add    BYTE PTR [rax],al
    2053:	add    BYTE PTR [rax+rax*1],bl
    2056:	add    BYTE PTR [rax],al
    2058:	call   2700204c <_end+0x26ffe01c>
    205d:	add    BYTE PTR [rax],al
    205f:	add    BYTE PTR [rax],al
    2061:	rex.R (bad) 
    2063:	adc    BYTE PTR [rax],al
    2065:	add    BYTE PTR [rax],al
    2067:	add    BYTE PTR [rax+rax*1],ah
    206a:	add    BYTE PTR [rax],al
    206c:	xor    al,0x0
    206e:	add    BYTE PTR [rax],al
    2070:	mov    al,0xef
    2072:	(bad)  
    2073:	call   QWORD PTR [rax]
    2075:	add    BYTE PTR [rax],al
    2077:	add    BYTE PTR [rax],al
    2079:	(bad)  
    207a:	adc    BYTE PTR [rsi+0xe],al
    207d:	sbb    BYTE PTR [rdx+0xf],cl
    2080:	or     esi,DWORD PTR [rdi+0x8]
    2083:	add    BYTE PTR [rax],0x3f
    2086:	sbb    bh,BYTE PTR [rbx]
    2088:	sub    dh,BYTE PTR [rbx]
    208a:	and    al,0x22
    208c:	add    BYTE PTR [rax],al
    208e:	add    BYTE PTR [rax],al
    2090:	adc    al,0x0
    2092:	add    BYTE PTR [rax],al
    2094:	pop    rsp
    2095:	add    BYTE PTR [rax],al
    2097:	add    BYTE PTR [rax+0x8ffffef],bl
	...
    20a5:	add    BYTE PTR [rax],al
    20a7:	add    BYTE PTR [rax+rax*1],bl
    20aa:	add    BYTE PTR [rax],al
    20ac:	je     20ae <__GNU_EH_FRAME_HDR+0xaa>
    20ae:	add    BYTE PTR [rax],al
    20b0:	xor    al,0xff
    20b3:	call   FWORD PTR [rax]
    20b5:	add    BYTE PTR [rax],al
    20b7:	add    BYTE PTR [rax],al
    20b9:	rex.B (bad) 
    20bb:	adc    BYTE PTR [rsi+0x60d4302],al
    20c1:	push   rbx
    20c2:	or     al,0x7
    20c4:	or     BYTE PTR [rax],al
    20c6:	add    BYTE PTR [rax],al
    20c8:	sbb    al,0x0
    20ca:	add    BYTE PTR [rax],al
    20cc:	xchg   esp,eax
    20cd:	add    BYTE PTR [rax],al
    20cf:	add    BYTE PTR [rax+0x2dfffff0],al
    20d5:	add    BYTE PTR [rax],al
    20d7:	add    BYTE PTR [rax],al
    20d9:	rex.B (bad) 
    20db:	adc    BYTE PTR [rsi+0x60d4302],al
    20e1:	push   0x8070c
	...

00000000000020e8 <__FRAME_END__>:
    20e8:	add    BYTE PTR [rax],al
	...

Disassembly of section .init_array:

0000000000003e18 <__frame_dummy_init_array_entry>:
    3e18:	and    BYTE PTR [rcx],dl
    3e1a:	add    BYTE PTR [rax],al
    3e1c:	add    BYTE PTR [rax],al
	...

Disassembly of section .fini_array:

0000000000003e20 <__do_global_dtors_aux_fini_array_entry>:
    3e20:	loopne 3e32 <_DYNAMIC+0xa>
    3e22:	add    BYTE PTR [rax],al
    3e24:	add    BYTE PTR [rax],al
	...

Disassembly of section .dynamic:

0000000000003e28 <_DYNAMIC>:
    3e28:	add    DWORD PTR [rax],eax
    3e2a:	add    BYTE PTR [rax],al
    3e2c:	add    BYTE PTR [rax],al
    3e2e:	add    BYTE PTR [rax],al
    3e30:	and    al,BYTE PTR [rax]
    3e32:	add    BYTE PTR [rax],al
    3e34:	add    BYTE PTR [rax],al
    3e36:	add    BYTE PTR [rax],al
    3e38:	or     al,0x0
    3e3a:	add    BYTE PTR [rax],al
    3e3c:	add    BYTE PTR [rax],al
    3e3e:	add    BYTE PTR [rax],al
    3e40:	add    BYTE PTR [rax],dl
    3e42:	add    BYTE PTR [rax],al
    3e44:	add    BYTE PTR [rax],al
    3e46:	add    BYTE PTR [rax],al
    3e48:	or     eax,0x0
    3e4d:	add    BYTE PTR [rax],al
    3e4f:	add    BYTE PTR [rax+0x11],al
    3e55:	add    BYTE PTR [rax],al
    3e57:	add    BYTE PTR [rcx],bl
    3e59:	add    BYTE PTR [rax],al
    3e5b:	add    BYTE PTR [rax],al
    3e5d:	add    BYTE PTR [rax],al
    3e5f:	add    BYTE PTR [rax],bl
    3e61:	ds add BYTE PTR [rax],al
    3e64:	add    BYTE PTR [rax],al
    3e66:	add    BYTE PTR [rax],al
    3e68:	sbb    eax,DWORD PTR [rax]
    3e6a:	add    BYTE PTR [rax],al
    3e6c:	add    BYTE PTR [rax],al
    3e6e:	add    BYTE PTR [rax],al
    3e70:	or     BYTE PTR [rax],al
    3e72:	add    BYTE PTR [rax],al
    3e74:	add    BYTE PTR [rax],al
    3e76:	add    BYTE PTR [rax],al
    3e78:	sbb    al,BYTE PTR [rax]
    3e7a:	add    BYTE PTR [rax],al
    3e7c:	add    BYTE PTR [rax],al
    3e7e:	add    BYTE PTR [rax],al
    3e80:	and    BYTE PTR [rsi],bh
    3e82:	add    BYTE PTR [rax],al
    3e84:	add    BYTE PTR [rax],al
    3e86:	add    BYTE PTR [rax],al
    3e88:	sbb    al,0x0
    3e8a:	add    BYTE PTR [rax],al
    3e8c:	add    BYTE PTR [rax],al
    3e8e:	add    BYTE PTR [rax],al
    3e90:	or     BYTE PTR [rax],al
    3e92:	add    BYTE PTR [rax],al
    3e94:	add    BYTE PTR [rax],al
    3e96:	add    BYTE PTR [rax],al
    3e98:	cmc    
    3e99:	(bad)  
    3e9a:	jmp    FWORD PTR [rdi+0x0]
    3e9d:	add    BYTE PTR [rax],al
    3e9f:	add    BYTE PTR [rax+0x3],bh
    3ea2:	add    BYTE PTR [rax],al
    3ea4:	add    BYTE PTR [rax],al
    3ea6:	add    BYTE PTR [rax],al
    3ea8:	add    eax,0x0
    3ead:	add    BYTE PTR [rax],al
    3eaf:	add    BYTE PTR [rax],dh
    3eb1:	add    al,0x0
    3eb3:	add    BYTE PTR [rax],al
    3eb5:	add    BYTE PTR [rax],al
    3eb7:	add    BYTE PTR [rsi],al
    3eb9:	add    BYTE PTR [rax],al
    3ebb:	add    BYTE PTR [rax],al
    3ebd:	add    BYTE PTR [rax],al
    3ebf:	add    BYTE PTR [rax+0x3],ah
    3ec5:	add    BYTE PTR [rax],al
    3ec7:	add    BYTE PTR [rdx],cl
    3ec9:	add    BYTE PTR [rax],al
    3ecb:	add    BYTE PTR [rax],al
    3ecd:	add    BYTE PTR [rax],al
    3ecf:	add    BYTE PTR [rax+0x0],cl
    3ed5:	add    BYTE PTR [rax],al
    3ed7:	add    BYTE PTR [rbx],cl
    3ed9:	add    BYTE PTR [rax],al
    3edb:	add    BYTE PTR [rax],al
    3edd:	add    BYTE PTR [rax],al
    3edf:	add    BYTE PTR [rax],bl
    3ee1:	add    BYTE PTR [rax],al
    3ee3:	add    BYTE PTR [rax],al
    3ee5:	add    BYTE PTR [rax],al
    3ee7:	add    BYTE PTR [rip+0x0],dl        # 3eed <_DYNAMIC+0xc5>
	...
    3ef5:	add    BYTE PTR [rax],al
    3ef7:	add    BYTE PTR [rbx],al
	...
    3f01:	rex add BYTE PTR [rax],al
    3f04:	add    BYTE PTR [rax],al
    3f06:	add    BYTE PTR [rax],al
    3f08:	(bad)  
    3f09:	add    BYTE PTR [rax],al
    3f0b:	add    BYTE PTR [rax],al
    3f0d:	add    BYTE PTR [rax],al
    3f0f:	add    al,bh
    3f11:	add    al,0x0
    3f13:	add    BYTE PTR [rax],al
    3f15:	add    BYTE PTR [rax],al
    3f17:	add    BYTE PTR [rax],cl
    3f19:	add    BYTE PTR [rax],al
    3f1b:	add    BYTE PTR [rax],al
    3f1d:	add    BYTE PTR [rax],al
    3f1f:	add    al,al
    3f21:	add    BYTE PTR [rax],al
    3f23:	add    BYTE PTR [rax],al
    3f25:	add    BYTE PTR [rax],al
    3f27:	add    BYTE PTR [rcx],cl
    3f29:	add    BYTE PTR [rax],al
    3f2b:	add    BYTE PTR [rax],al
    3f2d:	add    BYTE PTR [rax],al
    3f2f:	add    BYTE PTR [rax],bl
    3f31:	add    BYTE PTR [rax],al
    3f33:	add    BYTE PTR [rax],al
    3f35:	add    BYTE PTR [rax],al
    3f37:	add    bl,bh
    3f39:	(bad)  
    3f3a:	jmp    FWORD PTR [rdi+0x0]
    3f3d:	add    BYTE PTR [rax],al
    3f3f:	add    BYTE PTR [rax],al
    3f41:	add    BYTE PTR [rax],al
    3f43:	or     BYTE PTR [rax],al
    3f45:	add    BYTE PTR [rax],al
    3f47:	add    dh,bh
    3f49:	(bad)  
    3f4a:	jmp    FWORD PTR [rdi+0x0]
    3f4d:	add    BYTE PTR [rax],al
    3f4f:	add    al,cl
    3f51:	add    al,0x0
    3f53:	add    BYTE PTR [rax],al
    3f55:	add    BYTE PTR [rax],al
    3f57:	add    bh,bh
    3f59:	(bad)  
    3f5a:	jmp    FWORD PTR [rdi+0x0]
    3f5d:	add    BYTE PTR [rax],al
    3f5f:	add    BYTE PTR [rcx],al
    3f61:	add    BYTE PTR [rax],al
    3f63:	add    BYTE PTR [rax],al
    3f65:	add    BYTE PTR [rax],al
    3f67:	add    al,dh
    3f69:	(bad)  
    3f6a:	jmp    FWORD PTR [rdi+0x0]
    3f6d:	add    BYTE PTR [rax],al
    3f6f:	add    BYTE PTR [rax+0x4],bh
    3f75:	add    BYTE PTR [rax],al
    3f77:	add    cl,bh
    3f79:	(bad)  
    3f7a:	jmp    FWORD PTR [rdi+0x0]
    3f7d:	add    BYTE PTR [rax],al
    3f7f:	add    BYTE PTR [rbx],al
	...

Disassembly of section .got:

0000000000003fd8 <.got>:
	...

Disassembly of section .got.plt:

0000000000004000 <_GLOBAL_OFFSET_TABLE_>:
    4000:	sub    BYTE PTR [rsi],bh
	...

Disassembly of section .data:

0000000000004018 <__data_start>:
	...

0000000000004020 <__dso_handle>:
    4020:	and    BYTE PTR [rax+0x0],al
    4023:	add    BYTE PTR [rax],al
    4025:	add    BYTE PTR [rax],al
	...

Disassembly of section .bss:

0000000000004028 <completed.0>:
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	rex.RXB
   1:	rex.XB
   2:	rex.XB cmp spl,BYTE PTR [r8]
   5:	sub    BYTE PTR [rbp+0x62],dl
   8:	jne    78 <__abi_tag-0x2e0>
   a:	je     81 <__abi_tag-0x2d7>
   c:	and    BYTE PTR [rcx],dh
   e:	xor    DWORD PTR [rsi],ebp
  10:	xor    ch,BYTE PTR [rsi]
  12:	xor    BYTE PTR [rip+0x75627537],ch        # 7562754f <_end+0x7562351f>
  18:	outs   dx,BYTE PTR ds:[rsi]
  19:	je     90 <__abi_tag-0x2c8>
  1b:	xor    ch,BYTE PTR [rcx]
  1d:	and    BYTE PTR [rcx],dh
  1f:	xor    DWORD PTR [rsi],ebp
  21:	xor    ch,BYTE PTR [rsi]
  23:	xor    BYTE PTR [rax],al
  25:	movsxd ebp,DWORD PTR [rcx+riz*2+0x6e]
  29:	and    BYTE PTR [esi+0x65],dh
  2d:	jb     a2 <__abi_tag-0x2b6>
  2f:	imul   ebp,DWORD PTR [rdi+0x6e],0x2e353120
  36:	xor    BYTE PTR [rsi],ch
  38:	ss
	...
